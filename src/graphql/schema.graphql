scalar Cursor
scalar Time

interface Node {
  id: ID!
}

type EnhanceConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [EnhanceEdge]
}

type EnhanceEdge {
  node: Enhance
  cursor: Cursor!
}

type Enhance implements Node {
  id: ID!
  success: Boolean
  item: Item!
}

input CreateEnhanceInput {
  item: ID!
}

type InventoryConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [InventoryEdge]
}

type InventoryEdge {
  node: Inventory
  cursor: Cursor!
}

type Inventory implements Node {
  id: ID!
  user: User!
  item_on_slot: String!
  items: [Item]!
  created_at: String!
  last_updated_at: String!
}

input UpdateInventoryInput {
  id: ID!
  item_on_slot: ID!
}

type ItemConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ItemEdge]
}

type ItemEdge {
  node: Item
  cursor: Cursor!
}

type Item implements Node {
  id: ID!
  inventory: Inventory!
  itemtype: ItemType!
  damage: Int!
  speed: Int!
  current_enhance: Int! # default 0
  price: Int! # 마법의 공식: damage * speed * 7
  created_at: String!
  last_updated_at: String!
}

input CreateItemInput {
  inventory: ID!
  itemtype: ID! # initial damage, speed, price 결정
}

type ItemTypeConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ItemTypeEdge]
}

type ItemTypeEdge {
  node: ItemType
  cursor: Cursor!
}

type ItemType implements Node {
  id: ID!
  name: String!
  damage: Int!
  speed: Int!
  gold_per_second: Int!
  created_at: String!
  last_updated_at: String!
}

input CreateItemTypeInput {
  name: String!
  damage: Int
  speed: Int
  gold_per_second: Int
  created_at: String
  last_updated_at: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: Cursor!
}

type User implements Node {
  id: ID!
  gold: Int!
  created_at: String!
  last_updated_at: String!
  inventory: Inventory!
}

input CreateUserInput {
  gold: Int!
}

type Query {
  Enhance(id: ID): Enhance
  Enhances: [Enhance!]!
  EnhanceList(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
  ): EnhanceConnection

  Inventory(id: ID): Inventory
  Inventories: [Inventory!]!
  InventoryList(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
  ): InventoryConnection

  Item(id: ID): Item
  Items: [Item!]!
  ItemList(after: Cursor, first: Int, before: Cursor, last: Int): ItemConnection

  ItemType(id: ID): ItemType
  ItemTypes: [ItemType!]!
  ItemTypeList(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
  ): ItemTypeConnection

  User(id: ID): User
  Users: [User!]!
  UserList(after: Cursor, first: Int, before: Cursor, last: Int): UserConnection

  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

type Mutation {
  createEnhance(input: CreateEnhanceInput!): Enhance!
  updateInventory(input: UpdateInventoryInput!): Inventory!
  createItem(input: CreateItemInput!): Item!
  createItemType(input: CreateItemTypeInput!): ItemType!
  createUser(input: CreateUserInput!): User!
}
